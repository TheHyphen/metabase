org.quartz.scheduler.instanceName = MetabaseScheduler
org.quartz.scheduler.instanceId = AUTO
# default is 10
org.quartz.threadPool.threadCount = 10

# Don't phone home
org.quartz.scheduler.skipUpdateCheck = true

# --- Switched to RAMJobStore ---
# This uses in-memory storage. Jobs will NOT persist if the application restarts.
# Clustering is NOT supported with RAMJobStore.
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore

# --- Commented out JDBCJobStore specific settings ---
# org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# org.quartz.jobStore.dataSource=db
# org.quartz.jobStore.isClustered = true
# --- End of commented out settings ---

# By default, Quartz will fire triggers up to a minute late without considering them to be misfired; if it cannot fire
# anything within that period for one reason or another (such as all threads in the thread pool being tied up), the
# trigger is considered misfired. Threshold is in milliseconds.
#
# Default threshold is one minute (60,000)
# We'll keep the increased threshold of 15 minutes (900,000) as it relates to thread availability, 
# not just database persistence.
org.quartz.jobStore.misfireThreshold=900000

# Useful for debugging when Quartz jobs run and when they misfire (remains commented out)
#org.quartz.plugin.triggHistory.class = org.quartz.plugins.history.LoggingTriggerHistoryPlugin
#org.quartz.plugin.triggHistory.triggerFiredMessage = Trigger \{1\}.\{0\} fired job \{6\}.\{5\} at: \{4, date, HH:mm:ss MM/dd/yyyy}
#org.quartz.plugin.triggHistory.triggerCompleteMessage = Trigger \{1\}.\{0\} completed firing job \{6\}.\{5\} at \{4, date, HH:mm:ss MM/dd/yyyy\}.

# IMPORTANT: If you had datasource properties defined elsewhere in this file 
# (e.g., lines starting with org.quartz.dataSource.db.driver, .URL, .user, .password), 
# you should also comment those out or remove them if they were only used for Quartz.
